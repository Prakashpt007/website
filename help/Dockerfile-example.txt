# Step 1: We build the angular app using the production config
FROM node:latest as build


# Set the working directory
WORKDIR /UnifiedAppAdminFrontend

# Copy the package.json and package-lock.json files
COPY package*.json ./

# Run a clean install of the dependencies
RUN npm ci

RUN npm cache clear --force

RUN npm install --legacy-peer-deps

# Install Angular CLI globally
RUN npm install -g @angular/cli@17.3.0

# Copy all files
COPY . .

# Build the application
RUN npm run build --dev



# Step 2: We use the nginx image to serve  the application
FROM nginx:latest

# Copy the build output to replace the default nginx contents.
COPY ./nginx.conf /etc/nginx/conf.d/default.conf

# Copy the build output to replace the default nginx contents.
COPY --from=build /UnifiedAppAdminFrontend/dist/UnifiedAppAdminFrontend/browser /usr/share/nginx/html



# docker build --pull --rm -f "Dockerfile" -t unifiedappadminfrontend:latest "."
# docker run -d -p 8081:80 unifiedappadminfrontend



#---------------------old-----------------------------#

# # Stage 1: Build Angular app
# FROM node:18-alpine as builder

# WORKDIR /UnifiedAppAdminFrontend

# COPY . .

# RUN npm ci

# RUN npm install -g npm@10.7.0

# RUN npm cache clear --force

# RUN npm install --legacy-peer-deps

# RUN npm i @angular/cli@17.3.0  --force

# RUN npm run build --dev

# #stage 2
# FROM nginx:alpine
# COPY --from=builder /UnifiedAppAdminFrontend/dist/UnifiedAppAdminFrontend/ /usr/share/nginx/html
# COPY nginx.conf /etc/nginx/nginx.conf


#---------------------old-----------------------------#
